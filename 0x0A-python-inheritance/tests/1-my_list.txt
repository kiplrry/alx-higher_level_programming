The ``1-my_list`` module
======================

Using ``1-my_list``
-------------------

This is an test in text file.  First import
``1-my_list`` from the ``1-main`` module:

    >>> MyList = __import__('1-my_list').MyList

Now use it, expected way:

    >>> my_list = MyList()

    >>> my_list.append(1)
    >>> my_list.append(4)
    >>> my_list.append(2)
    >>> my_list.append(3)
    >>> my_list.append(5)
    >>> print(my_list)
    [1, 4, 2, 3, 5]

    >>> my_list.print_sorted()
    [1, 2, 3, 4, 5]


If a list are sorted previously:

    >>> my_list_so = MyList()

    >>> my_list_so.append(4)
    >>> my_list_so.append(5)
    >>> my_list_so.append(6)
    >>> print(my_list_so)
    [4, 5, 6]

    >>> my_list_so.print_sorted()
    [4, 5, 6]


If a list has negative elements:

    >>> my_list_n = MyList()

    >>> my_list_n.append(-4)
    >>> my_list_n.append(-3)
    >>> my_list_n.append(-6)
    >>> print(my_list_n)
    [-4, -3, -6]

    >>> my_list_n.print_sorted()
    [-6, -4, -3]

If a list has a string elements

    >>> my_list_s = MyList()

    >>> my_list_s.append('Better')
    >>> my_list_s.append('Off')
    >>> my_list_s.append('Alone')
    >>> print(my_list_s)
    ['Better', 'Off', 'Alone']

    >>> my_list_s.print_sorted()
    ['Alone', 'Better', 'Off']

If a list is empty:

    >>> my_list_e = MyList()
    >>> print(my_list_e)
    []

If an argument are passed by:
    >>> my_list_a = MyList([4, 3, 6])
    >>> print(my_list_a)
    [4, 3, 6]
    >>> my_list_a.print_sorted()
    [3, 4, 6]

If two argument are passed by:
    >>> my_list_t = MyList([4, 3, 6], [7, 8])
    Traceback (most recent call last):
    TypeError: list() takes at most 1 argument (2 given)

Different kind of elements:

    >>> my_list_k = MyList([4, 'Off', 6])
    >>> my_list_k.print_sorted()
    Traceback (most recent call last):
    TypeError: unorderable types: str() < int()
